/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLoginDetailArgs } from "./CreateLoginDetailArgs";
import { UpdateLoginDetailArgs } from "./UpdateLoginDetailArgs";
import { DeleteLoginDetailArgs } from "./DeleteLoginDetailArgs";
import { LoginDetailCountArgs } from "./LoginDetailCountArgs";
import { LoginDetailFindManyArgs } from "./LoginDetailFindManyArgs";
import { LoginDetailFindUniqueArgs } from "./LoginDetailFindUniqueArgs";
import { LoginDetail } from "./LoginDetail";
import { LoginDetailService } from "../loginDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LoginDetail)
export class LoginDetailResolverBase {
  constructor(
    protected readonly service: LoginDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LoginDetail",
    action: "read",
    possession: "any",
  })
  async _loginDetailsMeta(
    @graphql.Args() args: LoginDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LoginDetail])
  @nestAccessControl.UseRoles({
    resource: "LoginDetail",
    action: "read",
    possession: "any",
  })
  async loginDetails(
    @graphql.Args() args: LoginDetailFindManyArgs
  ): Promise<LoginDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LoginDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LoginDetail",
    action: "read",
    possession: "own",
  })
  async loginDetail(
    @graphql.Args() args: LoginDetailFindUniqueArgs
  ): Promise<LoginDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LoginDetail)
  @nestAccessControl.UseRoles({
    resource: "LoginDetail",
    action: "create",
    possession: "any",
  })
  async createLoginDetail(
    @graphql.Args() args: CreateLoginDetailArgs
  ): Promise<LoginDetail> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LoginDetail)
  @nestAccessControl.UseRoles({
    resource: "LoginDetail",
    action: "update",
    possession: "any",
  })
  async updateLoginDetail(
    @graphql.Args() args: UpdateLoginDetailArgs
  ): Promise<LoginDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LoginDetail)
  @nestAccessControl.UseRoles({
    resource: "LoginDetail",
    action: "delete",
    possession: "any",
  })
  async deleteLoginDetail(
    @graphql.Args() args: DeleteLoginDetailArgs
  ): Promise<LoginDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
